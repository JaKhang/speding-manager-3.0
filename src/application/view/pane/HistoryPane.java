/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package application.view.pane;

import application.controller.HistoryPaneController;
import application.model.Spending;
import application.view.color.SystemColor;
import application.view.components.datepicker.SelectedDate;
import application.view.components.notification.Notification;
import application.view.components.transitionpane.TransitionsForm;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author PC
 */
public class HistoryPane extends TransitionsForm {

    private final HistoryPaneController controller;

    /**
     * Creates new form HistoryPane
     *
     * @param controller
     */
    public HistoryPane(HistoryPaneController controller) {
        this.controller = controller;
        controller.setHistoryPane(this);
        initComponents();
        table.fixTable(jScrollPane);
        filterAction();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new application.view.components.datepicker.DateChooser();
        popup = new javax.swing.JPopupMenu();
        deleteItem = new javax.swing.JMenuItem();
        editItem = new javax.swing.JMenuItem();
        application.view.components.roundpane.RoundPanel roundPanel1 = new application.view.components.roundpane.RoundPanel();
        showDatepickerBtn = new application.view.components.CustomButton();
        jScrollPane = new javax.swing.JScrollPane();
        table = new application.view.components.table.Table();
        addBtn = new application.view.components.CustomButton();
        filter = new application.view.components.CustomComboBox();
        showDate = new application.view.components.TextField();
        setTotal = new application.view.components.TextField();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        previousBtn = new application.view.components.CustomButton();
        nextbtn = new application.view.components.CustomButton();
        jLabel1 = new javax.swing.JLabel();

        dateChooser1.setForeground(SystemColor.COLOR_3);
        dateChooser1.setTextRefernce(showDate);

        deleteItem.setFont(new java.awt.Font("Oswald", 0, 18)); // NOI18N
        deleteItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_remove_20px_1.png"))); // NOI18N
        deleteItem.setText("Xóa");
        deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemActionPerformed(evt);
            }
        });
        popup.add(deleteItem);

        editItem.setFont(new java.awt.Font("Oswald", 0, 18)); // NOI18N
        editItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_edit_20px.png"))); // NOI18N
        editItem.setText("Sửa");
        editItem.setActionCommand("");
        editItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editItemActionPerformed(evt);
            }
        });
        popup.add(editItem);

        setBackground(SystemColor.COLOR_1);
        setPreferredSize(new java.awt.Dimension(1040, 592));
        setLayout(null);

        roundPanel1.setBackground(new java.awt.Color(255, 255, 255));

        showDatepickerBtn.setBackground(SystemColor.COLOR_3);
        showDatepickerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_calendar_20px.png"))); // NOI18N
        showDatepickerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDatepickerBtnActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"01/07/2022", "Ăn", "25000", "Cơm"},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ngày", "Muc đích", "Chi", "Ghi chú"
            }
        ));
        table.setFont(new java.awt.Font("Oswald", 0, 18)); // NOI18N
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.setShowVerticalLines(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane.setViewportView(table);

        addBtn.setBackground(SystemColor.COLOR_3);
        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_plus_math_32px.png"))); // NOI18N
        addBtn.setPreferredSize(new java.awt.Dimension(42, 42));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        filter.setFont(new java.awt.Font("Oswald", 0, 18)); // NOI18N
        filter.addItem("Ngày");
        filter.addItem("Tháng");
        filter.addItem("Tất cả");
        filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterItemStateChanged(evt);
            }
        });

        showDate.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                showDateCaretUpdate(evt);
            }
        });
        showDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                showDatePropertyChange(evt);
            }
        });

        setTotal.setEditable(false);
        setTotal.setText("0 đ");

        jLabel2.setText("Tổng:");

        previousBtn.setBackground(new java.awt.Color(255, 255, 255));
        previousBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_Back_20px.png"))); // NOI18N
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });

        nextbtn.setBackground(new java.awt.Color(255, 255, 255));
        nextbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_Forward_20px.png"))); // NOI18N
        nextbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(showDate, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(showDatepickerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(setTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(roundPanel1Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(previousBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(showDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(showDatepickerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roundPanel1Layout.createSequentialGroup()
                                .addGap(171, 171, 171)
                                .addComponent(previousBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(roundPanel1Layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(nextbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(203, 203, 203))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );

        showDatepickerBtn.setRadius(20);
        addBtn.setRadius(42);
        filter.setRadius(20);
        showDate.setRadius(20);
        previousBtn.setRadius(36);
        previousBtn.setRadius(36);
        nextbtn.setRadius(36);

        add(roundPanel1);
        roundPanel1.setBounds(30, 50, 1180, 540);
        roundPanel1.setRound(20);

        jLabel1.setFont(new java.awt.Font("Oswald", 0, 36)); // NOI18N
        jLabel1.setText("Lịch sử chi tiêu");
        add(jLabel1);
        jLabel1.setBounds(30, -5, 210, 50);
    }// </editor-fold>//GEN-END:initComponents

    private void showDatepickerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDatepickerBtnActionPerformed
        dateChooser1.showPopup();
    }//GEN-LAST:event_showDatepickerBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        controller.showModal(HistoryPaneModal.ADD);
    }//GEN-LAST:event_addBtnActionPerformed

    private void showDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_showDatePropertyChange

    }//GEN-LAST:event_showDatePropertyChange

    private void showDateCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_showDateCaretUpdate
        filterAction();
    }//GEN-LAST:event_showDateCaretUpdate

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            popup.show(table, evt.getX(), evt.getY());
            int row = table.rowAtPoint(evt.getPoint());
            table.setRowSelectionInterval(row, row);
        }
    }//GEN-LAST:event_tableMouseClicked

    private void deleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemActionPerformed
        controller.removeSpending();
    }//GEN-LAST:event_deleteItemActionPerformed

    private void editItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editItemActionPerformed
        controller.showModal(HistoryPaneModal.EDIT);
    }//GEN-LAST:event_editItemActionPerformed

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        int index = filter.getSelectedIndex();
        if (index == 0)
            dateChooser1.previousDate();
        if (index == 1)
            dateChooser1.previousMonth();

    }//GEN-LAST:event_previousBtnActionPerformed

    private void nextbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextbtnActionPerformed
        int index = filter.getSelectedIndex();
        if (index == 0)
            dateChooser1.nextDate();
        if (index == 1)
            dateChooser1.nextMonth();
    }//GEN-LAST:event_nextbtnActionPerformed

    private void filterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterItemStateChanged
        filterAction();
    }//GEN-LAST:event_filterItemStateChanged

    private JFrame getMainFrame() {
        return (JFrame) (this.getParent().getParent().getParent().getParent().getParent().getParent());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private application.view.components.CustomButton addBtn;
    private application.view.components.datepicker.DateChooser dateChooser1;
    private javax.swing.JMenuItem deleteItem;
    private javax.swing.JMenuItem editItem;
    private application.view.components.CustomComboBox filter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane;
    private application.view.components.CustomButton nextbtn;
    private javax.swing.JPopupMenu popup;
    private application.view.components.CustomButton previousBtn;
    private application.view.components.TextField setTotal;
    private application.view.components.TextField showDate;
    private application.view.components.CustomButton showDatepickerBtn;
    private application.view.components.table.Table table;
    // End of variables declaration//GEN-END:variables
    /*
    ** view method
     */

    public void renderTable(List<Spending> spendings) {
        spendings.forEach(spending -> {
            SimpleDateFormat dateFormater = new SimpleDateFormat("dd-MM-yyyy");
            NumberFormat currencyFormater = NumberFormat.getCurrencyInstance();
            Object[] data = {dateFormater.format(spending.getDate()),
                spending.getPupose(),
                currencyFormater.format(spending.getMoney()),
                spending.getComment()};
            table.addRow(data);
        });
    }

    public void clearTable() {
        table.clear();
    }

    public void setTotal(int total) {
        this.setTotal.setText(NumberFormat.getCurrencyInstance().format(total));
    }

    public void showNotificationError(String message) {
        Notification notification = new Notification(getMainFrame(), Notification.Type.WARNING, Notification.Location.TOP_LEFT, message);
        notification.showNotification();
    }

    public void showNotificationSucsess(String message) {
        Notification notification = new Notification(getMainFrame(), Notification.Type.SUCCESS, Notification.Location.TOP_LEFT, message);
        notification.showNotification();
    }

    public void filterAction() {
        int index = filter.getSelectedIndex();
        switch (index) {
            case 0 ->
                controller.randerByDate(dateChooser1.getDate());
            case 1 ->
                controller.randerByMonth(dateChooser1.getDate());
            case 2 ->
                controller.randerAll();
            default -> {
            }
        }
    }

    public int getFilterStatus() {
        return filter.getSelectedIndex();
    }

    public SelectedDate getSelectedDate() {
        return dateChooser1.getSelectedDate();
    }

    public int getSelectedRow() {
        return table.getSelectedRow();
    }
}
