/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package application.view.pane;

import application.controller.StatictisController;
import application.model.DateSpending;
import application.model.PurposeStatictis;
import application.view.color.SystemColor;
import application.view.components.transitionpane.TransitionsForm;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 *
 * @author PC
 */
public class StatictisPane extends TransitionsForm {

    private StatictisController controller;

    /**
     * Creates new form StatictisPane
     */
    public StatictisPane(StatictisController controller) {
        this.controller = controller;
        controller.setStatictisPane(this);
        initComponents();
        table.fixTable(jScrollPane);
        controller.render();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        application.view.components.roundpane.RoundPanel roundPanel3 = new application.view.components.roundpane.RoundPanel();
        jScrollPane = new javax.swing.JScrollPane();
        table = new application.view.components.table.Table();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        maxCard = new application.view.components.card.Card();
        minCard = new application.view.components.card.Card();
        totalCard = new application.view.components.card.Card();
        averageCard = new application.view.components.card.Card();
        application.view.components.roundpane.RoundPanel roundPanel1 = new application.view.components.roundpane.RoundPanel();
        monthPicker1 = new application.view.components.MonthPicker();
        lineChart2 = new application.view.components.chart.LineChart();
        amoutDate = new javax.swing.JLabel();
        previousBtn = new application.view.components.CustomButton();
        nextbtn = new application.view.components.CustomButton();

        setBackground(SystemColor.COLOR_1);
        setLayout(null);

        roundPanel3.setBackground(new java.awt.Color(255, 255, 255));
        roundPanel3.setRound(20);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Mục đích", "Chi", "Lần", "Tỷ lệ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setColumnSelectionAllowed(true);
        table.setFont(new java.awt.Font("Oswald", 0, 18)); // NOI18N
        table.setShowVerticalLines(false);
        jScrollPane.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getColumnModel().getColumn(0).setMaxWidth(32);

        javax.swing.GroupLayout roundPanel3Layout = new javax.swing.GroupLayout(roundPanel3);
        roundPanel3.setLayout(roundPanel3Layout);
        roundPanel3Layout.setHorizontalGroup(
            roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                .addContainerGap())
        );
        roundPanel3Layout.setVerticalGroup(
            roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(roundPanel3);
        roundPanel3.setBounds(740, 190, 480, 400);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 16, 0));

        maxCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_up_28px.png")));
        jPanel1.add(maxCard);

        minCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_down_28px.png")));
        jPanel1.add(minCard);

        totalCard.setDescription("Tổng");
        totalCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_total_sales_28px.png")));
        jPanel1.add(totalCard);

        averageCard.setDescription("Trung bình");
        averageCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_Average_Price_28px.png")));
        jPanel1.add(averageCard);

        add(jPanel1);
        jPanel1.setBounds(20, 18, 1200, 150);

        roundPanel1.setBackground(new java.awt.Color(255, 255, 255));
        roundPanel1.setRound(20);
        roundPanel1.setLayout(null);
        roundPanel1.add(monthPicker1);
        monthPicker1.setBounds(270, 10, 160, 32);

        amoutDate.setText("jLabel1");

        javax.swing.GroupLayout lineChart2Layout = new javax.swing.GroupLayout(lineChart2);
        lineChart2.setLayout(lineChart2Layout);
        lineChart2Layout.setHorizontalGroup(
            lineChart2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineChart2Layout.createSequentialGroup()
                .addContainerGap(527, Short.MAX_VALUE)
                .addComponent(amoutDate)
                .addGap(8, 8, 8))
        );
        lineChart2Layout.setVerticalGroup(
            lineChart2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lineChart2Layout.createSequentialGroup()
                .addContainerGap(326, Short.MAX_VALUE)
                .addComponent(amoutDate))
        );

        roundPanel1.add(lineChart2);
        lineChart2.setBounds(54, 40, 590, 351);

        previousBtn.setBackground(new java.awt.Color(255, 255, 255));
        previousBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_Back_20px.png"))); // NOI18N
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });
        roundPanel1.add(previousBtn);
        previousBtn.setBounds(10, 180, 36, 36);
        nextbtn.setRadius(36);
        previousBtn.setRadius(36);

        nextbtn.setBackground(new java.awt.Color(255, 255, 255));
        nextbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/view/icon/icons8_Forward_20px.png"))); // NOI18N
        nextbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextbtnActionPerformed(evt);
            }
        });
        roundPanel1.add(nextbtn);
        nextbtn.setBounds(650, 180, 36, 36);
        nextbtn.setRadius(36);
        nextbtn.getAccessibleContext().setAccessibleDescription("");

        add(roundPanel1);
        roundPanel1.setBounds(20, 190, 700, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void nextbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextbtnActionPerformed
        monthPicker1.nextMonth();
        controller.render();
    }//GEN-LAST:event_nextbtnActionPerformed

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        monthPicker1.previusMonth();
        controller.render();    }//GEN-LAST:event_previousBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amoutDate;
    private application.view.components.card.Card averageCard;
    private javax.swing.JScrollPane jScrollPane;
    private application.view.components.chart.LineChart lineChart2;
    private application.view.components.card.Card maxCard;
    private application.view.components.card.Card minCard;
    private application.view.components.MonthPicker monthPicker1;
    private application.view.components.CustomButton nextbtn;
    private application.view.components.CustomButton previousBtn;
    private application.view.components.table.Table table;
    private application.view.components.card.Card totalCard;
    // End of variables declaration//GEN-END:variables

    public void setChartData(List<Integer> data) {
        lineChart2.setData(data);
        amoutDate.setText( lineChart2.hCount() + " ngày");
    }

    public void setController(StatictisController controller) {
        this.controller = controller;
    }

    public Date getSelectedMoth() {
        return monthPicker1.getMonth();
    }

    public StatictisController getController() {
        return controller;
    }

    public void showMaxDate(DateSpending dateSpending) {
        if (dateSpending.getDate() == null && dateSpending.getTotal() == 0) {
            maxCard.setValues("------ đ");
            maxCard.setDescription("--/--/----");
            return;
        }

        var dateFormater = new SimpleDateFormat("dd/MM/yyyy");
        var curencyFormater = NumberFormat.getCurrencyInstance();
        maxCard.setDescription(dateFormater.format(dateSpending.getDate()));
        maxCard.setValues(curencyFormater.format(dateSpending.getTotal()));
    }

    public void showMinDate(DateSpending dateSpending) {
        if (dateSpending.getDate() == null && dateSpending.getTotal() == 0) {
            minCard.setValues("------ đ");
            minCard.setDescription("--/--/----");
            return;
        }

        var dateFormater = new SimpleDateFormat("dd/MM/yyyy");
        minCard.setDescription(dateFormater.format(dateSpending.getDate()));
        var curencyFormater = NumberFormat.getCurrencyInstance();
        minCard.setValues(curencyFormater.format(dateSpending.getTotal()));
    }

    public void showTotal(int total) {
        var curencyFormater = NumberFormat.getCurrencyInstance();
        totalCard.setValues(curencyFormater.format(total));
    }
    
    public void showAverage(int average) {
        var curencyFormater = NumberFormat.getCurrencyInstance();
        averageCard.setValues(curencyFormater.format(average));
    }
    
    public void showTableData(List<PurposeStatictis> purposeStatictises){
        var curencyFormater = NumberFormat.getCurrencyInstance();
        var perCentFormater = NumberFormat.getPercentInstance();
        table.clear();
        purposeStatictises.forEach(o ->{
            Object[] data = {
                             table.getRowCount() + 1,
                             o.getPurpose(),
                             curencyFormater.format(o.getTotal()),
                             o.getTime(),
                             perCentFormater.format(o.getPercent())
                             };
            table.addRow(data);
        });
    }
    

}
